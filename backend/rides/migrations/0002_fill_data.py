# Generated by Django 5.2 on 2025-05-07 02:20

import random
import string
from django.db import migrations
from django.contrib.auth.hashers import make_password

users = [
    {"code": "07711", "name": "Esteban Carrillo Daniel",                   "email": "danielesteban@ufps.edu.co"},
    {"code": "1151358", "name": "Rodriguez Gomez Dairo Javier",            "email": "dairojavierrg@ufps.edu.co"},
    {"code": "1151696", "name": "Torres Villamil Ronald Dewer",            "email": "ronalddewertv@ufps.edu.co"},
    {"code": "1151717", "name": "Torres Ovallos David",                    "email": "ovallosdavidt@ufps.edu.co"},
    {"code": "1151783", "name": "Espinoza Fernandez Diego Mauricio",       "email": "diegomauricioef@ufps.edu.co"},
    {"code": "1151963", "name": "Vega Cruz Cristian Alejandro",            "email": "cristianalejandrovecr@ufps.edu.co"},
    {"code": "1151965", "name": "Ortiz Calderon Erwin Santiago",           "email": "erwinsantiagoorca@ufps.edu.co"},
    {"code": "1151982", "name": "Serrano Moreno Luis Fernando",            "email": "luisfernandosemo@ufps.edu.co"},
    {"code": "1152055", "name": "Duarte Rodriguez Edwin Andres",           "email": "edwinandresduro@ufps.edu.co"},
    {"code": "1152067", "name": "Bermudez Florez Diego Alexander",         "email": "diegoalexanderbefl@ufps.edu.co"},
    {"code": "1152072", "name": "Gutierrez Hernandez Harvey Santiago",     "email": "harveysantiagoghguh@ufps.edu.co"},
    {"code": "1152097", "name": "Granados Jaimes Diego Alexander",         "email": "diegoalexandergj@ufps.edu.co"},
    {"code": "1152098", "name": "Banguero Melo Juan Camilo",               "email": "juancamilobame@ufps.edu.co"},
    {"code": "1152214", "name": "Ovallos Diaz Keyly Johana",               "email": "keylyjohanaod@ufps.edu.co"},
    {"code": "1152215", "name": "Suarez Gomez Angie Gabriela",             "email": "angiegabrielasg@ufps.edu.co"},
    {"code": "1152243", "name": "Florez Diaz Jorge Sebastian",             "email": "jorgesebastianfd@ufps.edu.co"},
    {"code": "1152249", "name": "Ortiz Jaimes Andres Julian",              "email": "andresjulianoj@ufps.edu.co"},
    {"code": "1152259", "name": "Nuncira Florez Yoset Camilo",             "email": "yosetcamilonf@ufps.edu.co"},
    {"code": "1152264", "name": "Ayala Alvarez Yesica Alexandra",          "email": "yesicaalexandraaa@ufps.edu.co"},
    {"code": "1152268", "name": "Lopez Reyes Maria Jose",                  "email": "mariajoselr@ufps.edu.co"},
    {"code": "1152269", "name": "Barreto Ibarra Daniela Alejandra",        "email": "danielaalejandrabi@ufps.edu.co"},
    {"code": "1152270", "name": "Palencia Claro Omar Alexis",             "email": "omaralexispc@ufps.edu.co"},
    {"code": "1152283", "name": "Montañez Corredor Angel Leonardo",        "email": "angelleonardomoco@ufps.edu.co"},
    {"code": "1152330", "name": "Lozano Mantilla Elkin Andres",            "email": "elkinandreslm@ufps.edu.co"},
    {"code": "1152406", "name": "Avendaño Villamizar Carlos Antonio",      "email": "carlosantonioav@ufps.edu.co"},
    {"code": "1152431", "name": "Marciales Niebles Juan David",            "email": "juandavidmn@ufps.edu.co"},
]

VEHICLE_MODELS = [
    'Chevrolet Spark',
    'Renault Sandero',
    'Renault Kwid',
    'Renault Logan',
    'Kia Picanto',
]


def random_plate():
    letters = ''.join(random.choices(string.ascii_uppercase, k=3))
    numbers = f"{random.randint(0,999):03d}"
    return f"{letters}{numbers}"


def create_users(apps, schema_editor):
    CustomUser = apps.get_model('rides', 'CustomUser')
    Vehicle = apps.get_model('rides', 'Vehicle')
    Trip = apps.get_model('rides', 'Trip')
    Rating = apps.get_model('rides', 'Rating')

    created_users = []
    # Crear usuarios con flags aleatorios
    for u in users:
        parts = u['name'].split()
        last_name = ' '.join(parts[:2])  # dos apellidos
        first_name = ' '.join(parts[2:]) # nombres
        user = CustomUser.objects.create(
            username=u['email'],
            email=u['email'],
            password=make_password(u['code']),
            first_name=first_name,
            last_name=last_name,
            is_driver=random.choice([True, False]),
            is_passenger=random.choice([True, False]),
            is_available=False,
            is_superuser=True,
            is_staff=True,
        )
        created_users.append(user)

    # Crear vehículos para conductores
    for u in created_users:
        if u.is_driver:
            Vehicle.objects.create(
                driver=u,
                license_plate=random_plate(),
                model=random.choice(VEHICLE_MODELS),
                capacity=random.choice([4, 5]),
            )

    # Filtrar drivers y pasajeros
    drivers = [u for u in created_users if u.is_driver]
    passengers = [u for u in created_users if u.is_passenger]

    trips = []
    # Crear viajes aleatorios (1-3 por pasajero)
    for passenger in passengers:
        for _ in range(random.randint(1, 3)):
            driver = random.choice(drivers) if drivers else None
            trip = Trip.objects.create(
                passenger=passenger,
                driver=driver,
                status='PENDING'
            )
            trips.append(trip)

    # Crear calificaciones para cada viaje
    for trip in trips:
        Rating.objects.create(
            trip=trip,
            score=random.randint(1, 5),
            comment='',
        )


def delete_users(apps, schema_editor):
    CustomUser = apps.get_model('rides', 'CustomUser')
    Trip = apps.get_model('rides', 'Trip')
    Rating = apps.get_model('rides', 'Rating')
    Vehicle = apps.get_model('rides', 'Vehicle')

    emails = [u['email'] for u in users]
    # Borrar calificaciones y viajes
    Rating.objects.filter(trip__passenger__email__in=emails).delete()
    Trip.objects.filter(passenger__email__in=emails).delete()
    # Borrar vehículos y usuarios
    Vehicle.objects.filter(driver__email__in=emails).delete()
    CustomUser.objects.filter(email__in=emails).delete()


class Migration(migrations.Migration):

    dependencies = [
        ('rides', '0001_initial'),
    ]

    operations = [
        migrations.RunPython(create_users, delete_users),
    ]
